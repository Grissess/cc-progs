local libdaemon = require('libdaemon')
local component = require('component')
local event = require('event')
local term = require('term')

local args = {...}

if #args < 1 then
	print('dctl CMD -- control daemons')
	print('CMD may be:')
	print('  load <name> - load (but do not start) a daemon')
	print('  start <name> <args>... - start loaded daemon, passing it args--gives an instance name')
	print('  stop <inst> - stop running daemon')
	print('  restart <inst> <args>... - stop the instance, then start it again')
	print('  reload <inst> - same as above, but use the same args as when it was started')
	print('  unload <name> - unload a loaded daemon, stopping all of its running instances')
	print('  list - lists instances and daemons')
	print('  show - idem')
	print('  available - show a (possibly incomplete) list of files that look like loadable daemons')
	print('  avail - idem')
	print('  defaults <name> - shows default configuration values for a daemon')
	print('  logcat - prints out (fresh) debug log entries while running, press any key to stop')
	print('  rlogcat [<linesper>] - prints out remote debug log entries while running, press any key to stop')
	return 1
end

local cmds = {
	load = function()
		if #args < 2 then error("Expected a daemon name") end
		print("Load result:", libdaemon.try_load(args[2]))
	end,
	start = function()
		if #args < 2 then error("Expected a daemon name") end
		local dmn = libdaemon.get(args[2])
		if dmn == nil then error("Daemon not loaded--have you tried load?") end
		local inst = dmn:start(table.unpack(args, 3))
		print("Started as " .. inst.name .. ":", inst)
	end,
	stop = function()
		if #args < 2 then error("Expected an instance name") end
		local inst = libdaemon.get_inst(args[2])
		if inst == nil then error("No such instance") end
		inst:stop()
		print("Stopped:", inst)
	end,
	restart = function()
		if #args < 2 then error("Expected an instance name") end
		local inst = libdaemon.get_inst(args[2])
		if inst == nil then error("No such instance") end
		inst:stop()
		print("Stopped:", inst)
		inst = inst.template:start(table.unpack(args, 3))
		print("Started as " .. inst.name .. ":", inst)
	end,
	reload = function()
		if #args < 2 then error("Expected an instance name") end
		local inst = libdaemon.get_inst(args[2])
		if inst == nil then error("No such instance") end
		inst:stop()
		print("Stopped:", inst)
		inst = inst.template:start(table.unpack(inst.args))
		print("Started as " .. inst.name .. ":", inst)
	end,
	unload = function()
		if #args < 2 then error("Expected a daemon name") end
		libdaemon.remove(args[2])
		print("Unloaded!")
	end,
	list = function()
		print('Loaded templates:')
		for name, dmn in pairs(libdaemon.all) do
			print('', name, dmn)
		end
		print('Running instances:')
		for name, inst in pairs(libdaemon.insts) do
			print('', name, inst)
		end
	end,
	available = function()
		print('Apparently available daemons:')
		local av = libdaemon.available()
		for nm, _ in pairs(av) do
			print(nm)
		end
	end,
	defaults = function()
		if #args < 2 then error("Expected a daemon name") end
		local dmn = libdaemon.get(args[2])
		if dmn == nil then error("Daemon not loaded--have you tried load?") end
		print("Default config for " .. dmn.name .. ":")
		if dmn.defaults == nil then
			print("(no defaults)")
		else
			for k, v in pairs(dmn.defaults) do
				print(tostring(k) .. " = " .. tostring(v))
			end
		end
	end,
	logcat = function()
		table.insert(libdaemon.loggers, print)
		event.pull('key_down')
		local found = false
		for idx, v in ipairs(libdaemon.loggers) do
			if v == print then
				table.remove(libdaemon.loggers, idx)
				found = true
				break
			end
		end
		if not found then
			print('WARNING: did not remove logging function, you may still get spam')
		end
	end,
	rlogcat = function()
		local linesper = 5
		if args[2] ~= nil then
			linesper = tonumber(args[2])
		end
		local recvtbl = {}
		local recvord = {}
		local just_opened = component.modem.open(12345)
		while true do
			local ev = {event.pull()}
			if ev[1] == "key_down" then break end
			if ev[1] == "modem_message" then
				local src = ev[3]
				if recvtbl[src] == nil then
					local msgt = {}
					for line = 1, linesper do
						table.insert(msgt, "")
					end
					recvtbl[src] = msgt
					table.insert(recvord, src)
				end
				local msgt = recvtbl[src]
				table.remove(msgt, 1)
				table.insert(msgt, table.concat(ev, " ", 6))
				term.clear()
				for ri, rcv in ipairs(recvord) do
					print(rcv)
					for mi, msg in ipairs(recvtbl[rcv]) do
						print(msg)
					end
					print('---')
				end
			end
		end
		if just_opened then
			component.modem.close(12345)
		end
	end,
}
cmds.show = cmds.list
cmds.avail = cmds.available

local handler = cmds[args[1]]
if handler == nil then error("Bad command--see help") end

handler()
