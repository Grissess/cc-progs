REVISION = 29

os.loadAPI("/disk/apis/libtedit")

local args = {...}

local text = ""
local path = nil
if #args > 0 then
	path = shell.resolve(args[1])
	if fs.exists(path) and not fs.isDir(path) then
		local f = io.open(path, "r")
		text = f:read("*a")
		f:close()
	end
end

local buf = libtedit.buffer.new(text)
local op = nil
local reg = ""
local entry = ""
local searchpat = nil

local mode = "normal"
local newmode
local running = true

options = {
	autoindent = true,
}

unprintable_map = {
	[keys.enter] = true,
	[keys.backspace] = true,
	[keys.leftCtrl] = true,
	[keys.leftShift] = true,
	[keys.leftAlt] = true,
	[keys.rightCtrl] = true,
	[keys.rightShift] = true,
	[keys.rightAlt] = true,
	[keys.capsLock] = true,
	[keys.numLock] = true,
	[keys.scollLock] = true,  -- XXX sic
	[keys.up] = true,
	[keys.down] = true,
	[keys.left] = true,
	[keys.right] = true,
	[keys.home] = true,
	[keys['end']] = true,
	[keys.insert] = true,
	[keys.delete] = true,
	[keys.pageUp] = true,
	[keys.pageDown] = true,
	[keys.f1] = true,
	[keys.f2] = true,
	[keys.f3] = true,
	[keys.f4] = true,
	[keys.f5] = true,
	[keys.f6] = true,
	[keys.f7] = true,
	[keys.f8] = true,
	[keys.f9] = true,
	[keys.f10] = true,
	[keys.f11] = true,
	[keys.f12] = true,
	[keys.kana] = true,
	[keys.convert] = true,
	[keys.noconvert] = true,
	[keys.stop] = true,
	[keys.kanji] = true,
	[keys.ax] = true,
}

function is_unprintable(key)
	return unprintable_map[key] == true
end

function simple_motion(char, key)
	if char == "h" or key == keys.left then
		buf:setcursor(buf.cx - 1, buf.cy)
		return true
	end
	if char == "j" or key == keys.down then
		buf:setcursor(buf.cx, buf.cy + 1)
		return true
	end
	if char == "k" or key == keys.up then
		buf:setcursor(buf.cx, buf.cy - 1)
		return true
	end
	if char == "l" or key == keys.right then
		buf:setcursor(buf.cx + 1, buf.cy)
		return true
	end
	if char == "^" or key == keys.home then
		buf:setcursor(1, buf.cy)
		return true
	end
	if char == "$" or key == keys['end'] then
		buf:setcursor(100000, buf.cy)  -- FIXME
		return true
	end
	if char == "g" then
		buf:setcursor(1, 1)
	end
	if char == "G" then
		buf:setcursor(1, #buf.lines)
	end
	if char == "w" then
		local txt = buf.lines[buf.cy]
		local idx = txt:find("%w", buf.cx + 1)
		if idx ~= nil then
			buf:setcursor(idx, buf.cy)
		end
		return true
	end
	if char == "W" then
		local txt = buf.lines[buf.cy]
		local idx = txt:find("%S", buf.cx + 1)
		if idx ~= nil then
			buf:setcursor(idx, buf.cy)
		end
		return true
	end
	if key == keys.pageDown then
		buf:setcursor(buf.cx, buf.cy + 20)
		return true
	end
	if key == keys.pageUp then
		buf:setcursor(buf.cx, buf.cy - 20)
		return true
	end
	return false
end

commands = {
	write = function(...)
		local parts = {...}
		if parts[1] ~= nil then
			path = shell.resolve(parts[1])
		end
		if path == nil then
			cmd_error("Can't save: no path specified (pass an argument)")
			return false
		end
		local f = io.open(path, "w")
		for idx, line in ipairs(buf.lines) do
			f:write(line.."\n")
		end
		f:close()
		buf.status = buf.status .. "(saved to " .. path .. ") "
		return true
	end,

	quit = function(...)
		running = false
		buf.status = buf.status .. "(goodbye :)"
		return true
	end,

	wq = function(...)
		if commands.write(...) then
			commands.quit(...)
		end
	end,

	noh = function(...)
		buf:sethighlights()
	end,

	syntax = function(...)
		local parts = {...}
		if #parts < 1 then
			cmd_error("No syntax specified")
			return false
		end
		local syn = libtedit.syntaxes[parts[1]]
		if syn == nil then
			cmd_error("Not a syntax")
			return false
		end
		buf.syntax = syn
	end,

	set = function(...)
		local parts = {...}
		if #parts < 1 then
			cmd_error("Specify at least a variable")
			return false
		end
		if #parts < 2 then
			buf.status = parts[1] .. ": " .. tostring(options[parts[1]])
			return true
		end
		local chunk, err = loadstring(parts[2], "option")
		if chunk == nil then
			buf.status = "Couldn't eval: " .. err
			return false
		end
		local stat, res = pcall(chunk)
		if not stat then
			buf.status = "Error in eval: " .. res
			return false
		end
		options[parts[1]] = res
	end,

	eval = function(...)
		local str = table.concat({...}, " ")
		local chunk, err = loadstring(str, "eval")
		if chunk == nil then
			buf.status = "Couldn't compile: " .. err
			return false
		end
		local stat, res = pcall(chunk)
		if not stat then
			buf.status = "Error in expression: " .. res
			return false
		end
		buf.status = tostring(res)
		return true
	end,
}

commands.w = commands.write
commands.q = commands.quit
commands['!'] = commands.eval

function run_command(cmd)
	local parts = {}
	for part in cmd:gmatch("%S+") do
		table.insert(parts, part)
	end
	cmd = table.remove(parts, 1)
	buf.status = ""
	local cmdfunc = commands[cmd]
	if cmdfunc == nil then
		cmd_error("Unknown command: "..cmd)
		return false
	end
	return cmdfunc(unpack(parts))
end

function cmd_error(errstr)
	buf.status = errstr
	buf:blit(term)
	os.sleep(1)
end

function do_search(pat)
	if pat ~= nil then
		searchpat = pat
	end
	if searchpat == nil then
		buf.status = "No prior search, aborting"
		return
	end
	buf:sethighlights(searchpat)
	local ly = buf.cy
	local lx = buf.cx + 1
	while ly <= #buf.lines do
		local stat, idx = pcall(string.find, buf.lines[ly], searchpat, lx)
		if not stat then
			buf.status = "Bad pattern"
			return
		end
		if idx ~= nil then
			buf:setcursor(idx, ly)
			return
		end
		ly = ly + 1
		lx = 1
	end
	buf.status = "Search wrapped to top"
	ly = 1
	while ly < buf.cy do
		local stat, idx = pcall(string.find, buf.lines[ly], searchpat, lx)
		if not stat then
			buf.status = "Bad pattern"
			return
		end
		if idx ~= nil then
			buf:setcursor(idx, ly)
			return
		end
		ly = ly + 1
		lx = 1
	end
	buf.status = "Pattern not found"
end

function auto_indent()
	if buf.cy <= 1 then return end
	local match = buf.lines[buf.cy - 1]:match("%s+")
	if match ~= nil then
		buf:insert(match)
	end
end

local modes = {
	normal = function(char, key) 
		buf.status = " -- NORMAL --"
		if simple_motion(char, key) then
			return "normal"
		end
		if char == "i" then
			return "insert"
		end
		if char == "I" then
			simple_motion("^", nil)
			return "insert"
		end
		if char == "o" then
			table.insert(buf.lines, buf.cy + 1, "")
			buf:setcursor(1, buf.cy + 1)
			if options.autoindent then
				auto_indent()
			end
			return "insert"
		end
		if char == "O" then
			table.insert(buf.lines, buf.cy, "")
			buf:setcursor(1, buf.cy)
			if options.autoindent then
				auto_indent()
			end
			return "insert"
		end
		if char == "a" then
			buf:setcursor(buf.cx + 1, buf.cy)
			return "insert"
		end
		if char == "A" then
			simple_motion("$", nil)
			return "insert"
		end
		if char == "p" then
			table.insert(buf.lines, buf.cy + 1, reg)
			return "normal"
		end
		if char == "p" then
			table.insert(buf.lines, buf.cy, reg)
			buf:setcursor(1, buf.cy + 1)
			return "normal"
		end
		if char == ":" then
			entry = ":"
			return "command"
		end
		if char == "d" then
			return "delete"
		end
		if char == "x" then
			buf:delete(1)
			buf:setcursor(buf.cx, buf.cy)
			return "normal"
		end
		if char == "y" then
			return "yank"
		end
		if char == "/" then
			entry = "/"
			return "search"
		end
		if char == "n" or char == ";" then
			do_search()
			return "normal"
		end
		if char == "f" then
			return "fsearch"
		end
		if char == "t" then
			return "tsearch"
		end
		if char == "z" then
			return "scroll"
		end
		if char ~= nil and char:match("%d") ~= nil then
			entry = char
			return "rep"
		end
		buf.status = "Unknown keypress"
		return "normal"
	end,

	delete = function(char, key)
		if char == "d" then
			table.remove(buf.lines, buf.cy)
			buf:setcursor(buf.cx, buf.cy)
			buf.status = "Line deleted"
		end
		return "normal"
	end,

	yank = function(char, key)
		if char == "y" then
			reg = buf.lines[buf.cy]
		end
		buf.status = "Yanked " .. #reg .. " chars"
		return "normal"
	end,

	search = function(char, key)
		if key == keys.enter then
			local pat = entry:sub(2)
			if #pat > 0 then
				do_search(pat)
			else
				do_search()
			end
			return "normal"
		end
		if key == keys.backspace then
			entry = entry:sub(1, -2)
			buf.status = entry
			if #entry > 0 then
				return "search"
			else
				return "normal"
			end
		end
		if char ~= nil then
			entry = entry .. char
		end
		buf.status = entry
		return "search"
	end,

	fsearch = function(char, key)
		if char == nil then
			return "fsearch"
		end
		do_search("%" .. char)
		return "normal"
	end,

	tsearch = function(char, key)
		if char == nil then
			return "tsearch"
		end
		do_search("%" .. char)
		buf:setcursor(buf.cx - 1, buf.cy)
		return "normal"
	end,

	scroll = function(char, key)
		if char == nil then
			return "scroll"
		end
		if char == "z" then
			buf:setscroll(buf.sx, buf.cy - math.floor(buf.height / 2))
		end
		if char == "t" then
			buf:setscroll(buf.sx, buf.cy)
		end
		if char == "b" then
			buf:setscroll(buf.sx, buf.cy - buf.height + 1)
		end
		return "normal"
	end,

	rep = function(char, key)
		if char ~= nil and char:match("%d") then
			entry = entry .. char
			buf.status = entry
			return "rep"
		end
		local val = tonumber(entry)
		if char == "g" then
			buf:setcursor(buf.cx, val)
			return "normal"
		end
		if char == "h" or char == "j" or char == "k" or char == "l" then
			for rep = 1, val do
				simple_motion(char, nil)
			end
			return "normal"
		end
		buf.status = "Unknown motion"
		return "normal"
	end,

	insert = function(char, key)
		buf.status = " -- INSERT --"
		if key == keys.left then
			buf:setcursor(buf.cx - 1, buf.cy)
			return "insert"
		end
		if key == keys.down then
			buf:setcursor(buf.cx, buf.cy + 1)
			return "insert"
		end
		if key == keys.up then
			buf:setcursor(buf.cx, buf.cy - 1)
			return "insert"
		end
		if key == keys.right then
			buf:setcursor(buf.cx + 1, buf.cy)
			return "insert"
		end
		if key == keys.backspace then
			if buf.cx == 1 and buf.cy ~= 1 then
				buf:setcursor(10000, buf.cy - 1)
				buf.lines[buf.cy] = buf.lines[buf.cy] .. buf.lines[buf.cy + 1]
				table.remove(buf.lines, buf.cy + 1)
				return "insert"
			end
			buf:setcursor(buf.cx - 1, buf.cy)
			buf:delete(1)
			return "insert"
		end
		if key == keys.delete then
			buf:delete(1)
			return "insert"
		end
		if key == keys.enter then
			table.insert(buf.lines, buf.cy + 1, "")
			buf:setcursor(1, buf.cy + 1)
			if options.autoindent then
				auto_indent()
			end
		end
		if char ~= nil then
			buf:insert(char)
		end
		return "insert"
	end,

	command = function(char, key)
		if key == keys.enter then
			run_command(entry:sub(2))
			return "normal"
		end
		if key == keys.backspace then
			entry = entry:sub(1, -2)
			buf.status = entry
			if #entry > 0 then
				return "command"
			else
				return "normal"
			end
		end
		if char ~= nil then
			entry = entry .. char
		end
		buf.status = entry
		return "command"
	end,
}

buf.status = "oc-progs vim rev " .. REVISION .. " libtedit " .. libtedit.REVISION .. " - Grissess"
buf:blit(term)

while running do
	local ev, p1, p2, p3 = os.pullEvent()
	if ev == "key" then
		if is_unprintable(p1) then
			if p1 == keys.rightAlt then
				newmode = "normal"
			else
				newmode = modes[mode](nil, p1)
			end
		else
			buf.status = "ignored printable ctrl " .. p1
		end
	end
	if ev == "char" then
		newmode = modes[mode](p1, nil)
	end
	if ev == "mouse_click" then
		if p1 == 1 then
			buf:setcursor(buf.sx + p2 - 1, buf.sy + p3 - 1)
		end
	end
	if newmode ~= nil then
		if modes[newmode] ~= nil then
			mode = newmode
		else
			buf.status = "Warning: no such mode " .. newmode
		end
	end
	local oldstatus = buf.status
	buf.status = "[" .. mode .. ":" .. buf.cy .. "/" .. #buf.lines .. "," .. buf.cx .. "] " .. buf.status
	buf:blit(term)
	buf.status = oldstatus
end

term.clear()
term.setCursorPos(1, 1)
term.setTextColor(colors.white)
print("[exited vim]")
