REVISION = 8

print('cc-progs bootstrapper rev ' .. REVISION .. ' - Grissess')

local CC = os.loadAPI ~= nil
local HTTP_ROOT = "https://raw.githubusercontent.com/Grissess/cc-progs/master/"

print('Is ComputerCraft:', CC)
print('HTTP root:', HTTP_ROOT)

local DISK_ROOT
if CC then
	DISK_ROOT = "/disk"
else
	DISK_ROOT = "/usr"
end

local rand = math.floor(65536 * math.random())

local args = {...}

if args[1] ~= nil then
	DISK_ROOT = args[1]
end

local raw = false
if args[2] ~= nil then
	raw = true
end

print('Install root:', DISK_ROOT)
print('Raw image:', raw)
if raw then
	print('!!! (CHECK THE ABOVE SETTING VERY CAREFULLY!)')
end

if CC then
	if http == nil then
		error("HTTP isn't supported, sorry")
	end
else
	internet = require('internet')
	filesystem = require('filesystem')
end

local resp
repeat
	print('Are these settings OK? [Y/n]')
	resp = io.read():lower()
until resp == '' or resp == 'y' or resp == 'n'

if resp == 'n' then
	error('Aborted.')
end

local MANIFEST
if CC then
	MANIFEST = "manifest.cc"
else
	MANIFEST = "manifest.oc"
end

print('Getting:', MANIFEST)


local function http_get(uri)
	if CC then
		local req = http.get(uri)
		if req == nil then
			print("Failed!")
		elseif req.getResponseCode() ~= 200 then
			print("Failed: HTTP status ", req.getResponseCode())
			req.close()
		end
		local buffer = req.readAll()
		req.close()
		return buffer
	else
		local buffer = ''
		for data in internet.request(uri) do
			buffer = buffer .. data
		end
		return buffer
	end
end
local man_str = http_get(HTTP_ROOT .. MANIFEST .. "?rand=" .. rand)

for line in man_str:gmatch("[^\r\n]+") do
	if line:sub(1, 1) == "!" then
		print('msg:', line)
	else
		local dest, src = line:match("([^%s]+) ([^%s]+)")
		if raw then
			dest = src
		end
		print('Downloading', src, 'to', dest)
		local data = http_get(HTTP_ROOT .. src .. "?rand=" .. rand)
		local lpath
		if CC then
			lpath = fs.combine(DISK_ROOT, dest)
		else
			lpath = filesystem.concat(DISK_ROOT, dest)
		end
		local f
		print("Writing to ", lpath, "...")
		if CC then
			fs.makeDir(fs.getDir(lpath))
			f = fs.open(lpath, "w")
			f.write(data)
			f.close()
		else
			filesystem.makeDirectory(filesystem.path(lpath))
			f = filesystem.open(lpath, "w")
			f:write(data)
			f:close()
		end
		print("Done!")
	end
end

print("Complete!")
