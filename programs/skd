local CC = os.loadAPI ~= nil
local ppath = ''
if CC then ppath = 'lib.' end

local liblua = require(ppath .. 'liblua')
local libacid = require(ppath .. 'libacid')

fs.makeDir('/etc')
local dbo = libacid.DB('/etc/skd.conf')

local defaultConfig = {
	scanInterval = 10,
	groups = {},
}

local database = dbo:get()

local function log(...)
	print(textutils.formatTime(os.time(), true), ...)
end

local function save()
	log('saved db')
	dbo:set(database)
end

local dirty = false
for k, v in pairs(defaultConfig) do
	if not database[k] then
		database[k] = v
		dirty = true
	end
end
if dirty then save() end

local function annotateAddress(addr, inv)
	inv.addr = addr
	return true
end

local function allInventories()
	return {peripheral.find('inventory', annotateAddress)}
end

local function inventoriesInGroup(grp)
	local set = database.groups[grp]
	if not set then return {} end
	return {peripheral.find('inventory', function(addr, inv)
		if set[addr] then
			inv.addr = addr
			return true
		end
	end)}
end

local function species(stack)
	if stack.nbt then
		return stack.name .. ':' .. stack.nbt
	else
		return stack.name
	end
end

local function toLoc(inv, slot)
	return inv.addr .. '/' .. slot
end

local function fromLoc(loc)
	local addr, slot = loc:match('^(.*)/(%d+)$')
	assert(slot, 'invalid location')
	local inv = peripheral.wrap(addr)
	inv.addr = addr
	return inv, tonumber(slot)
end

local function scan()
	log('scan')
	database.stock = {}
	database.slots = {ready = 0, total = 0}
	database.names = {}
	for _, inv in ipairs(allInventories()) do
		local empty = inv.size()
		database.slots.total = database.slots.total + empty
		for slot, stack in pairs(inv.list()) do
			empty = empty - 1
			local sp = species(stack)
			if not database.stock[sp] then
				database.stock[sp] = {available = {count = 0, locations = {}}}
			end
			local avail = database.stock[sp].available
			avail.count = avail.count + stack.count
			local loc = toLoc(inv, slot)
			avail.locations[loc] = stack.count
		end
		database.slots.ready = database.slots.ready + empty
	end
end

local function firstFreeSlot(inv)
	local list = inv.list()
	for i = 1, inv.size() do
		if list[i] == nil then return i end
	end
end

local function advanceFreeSlotCursor(cur)
	cur.slot = firstFreeSlot(cur.invs[cur.idx])
	while (not cur.slot) and cur.idx <= #cur.invs do
		cur.idx = cur.idx + 1
		cur.slot = firstFreeSlot(cur.invs[cur.idx])
	end
	if cur.idx > #cur.invs then cur.exhausted = true end
end

local function newFreeSlotCursor(invs)
	local cur = {invs = invs, idx = 1}
	advanceFreeSlotCursor(cur)
	return cur
end

local function freeSlotCursorLoc(cur)
	return cur.invs[cur.idx], cur.slot
end

local function moveTo(grp, sp, count)
	local targets = inventoriesInGroup(grp)
	local target = newFreeSlotCursor(targets)
	if target.exhausted then return false, 'not enough destination space' end

	local sources = database.stock[sp]
	for location, amt in pairs(sources.available.locations) do
		local inv, slot = fromLoc(location)
		local info
		repeat
			info = inv.getItemDetail(slot)
			if not info then break end  -- did we empty the slot?
			-- This could be false when our info is stale; don't move the stack otherwise
			if species(info) ~= sp then break end

			local toMove = math.min(count, info.count)
			local tinv, tslot = freeSlotCursorLoc(target)
			local moved = inv.pushItems(tinv.addr, slot, toMove, tslot)
			count = count - moved
			if count == 0 then return true end

			-- If nothing moved, the tslot is probably full; try another target
			if moved == 0 then
				advanceFreeSlotCursor(target)
				if target.exhausted then return false, 'not enough destination space' end
			end
		until false
	end
	return false, 'not enough items to satisfy request'
end

local function moveAway(sgrp, tgrp)
	local sources = inventoriesInGroup(sgrp)
	local targets = inventoriesInGroup(tgrp)
	local target = newFreeSlotCursor(targets)
	if target.exhausted then return false, 'not enough target space' end

	for _, source in ipairs(sources) do
		for slot = 1, source.size() do
			local info
			repeat
				info = source.getItemDetail(slot)
				if not info then break end

				local tinv, tslot = freeSlotCursorLoc(target)
				local moved = source.pushItems(tinv.addr, slot, info.count, tslot)
				if moved == 0 then
					advanceFreeSlotCursor(target)
					if target.exhausted then return false, 'not enough target space' end
				end
			until false
		end
	end
	return true
end

local function speciesMatching(pat)
	local ret = {}
	for sp, _ in pairs(database.stock) do
		if sp:match(pat) then
			table.insert(ret, sp)
		end
	end
	return ret
end

local function getGroups()
	local ret = liblua.set_to_seq(database.groups)
	table.sort(ret)
	return ret
end

local function getGroup(grp)
	local grp = database.groups[grp]
	if not group then return {} end
	local ret = liblua.set_to_seq(grp)
	table.sort(ret)
	return ret
end

local function addToGroup(grp, ifaces)
	if not database.groups[grp] then database.groups[grp] = {} end
	for _, iface in ipairs(ifaces) do
		database.groups[grp][iface] = true
	end
	save()
end

local function removeFromGroup(grp, ifaces)
	if not database.groups[grp] then return end
	for _, iface in ipairs(ifaces) do
		database.groups[grp][iface] = nil
	end
	if not next(database.groups[grp]) then database.groups[grp] = nil end
	save()
end

local function clearGroup(grp)
	database.groups[grp] = nil
end

local function getInterfaceNames()
	local ret = {}
	local ifaces = allInventories()
	for _, iface in ipairs(ifaces) do
		table.insert(ret, iface.addr)
	end
	table.sort(ret)
	return ret
end

local cmds = {
	moveTo = function(cmd)
		local ok, msg = moveTo(cmd.group, cmd.species, cmd.count)
		scan()
		return {ok = ok, message = msg}
	end,
	moveAway = function(cmd)
		local ok, msg = moveAway(cmd.sourceGroup, cmd.targetGroup)
		scan()
		return {ok = ok, message = msg}
	end,
	stock = function(cmd)
		if cmd.species then
			return {ok = true, stock = database.stock[cmd.species]}
		end
		return {ok = true, stock = database.stock}
	end,
	search = function(cmd)
		return {ok = true, matches = speciesMatching(cmd.pattern)}
	end,
	group = function(cmd)
		if cmd.group then
			return {ok = true, interfaces = getGroup(cmd.group)}
		end
		return {ok = true, groups = getGroups()}
	end,
	groupAdd = function(cmd)
		addToGroup(cmd.group, cmd.interfaces)
		return {ok = true}
	end,
	groupRemove = function(cmd)
		removeFromGroup(cmd.group, cmd.interfaces)
		return {ok = true}
	end,
	groupClear = function(cmd)
		clearGroup(cmd.group)
		return {ok = true}
	end,
	interfaces = function(cmd)
		return {ok = true, interfaces = getInterfaceNames()}
	end,
	save = function(cmd)
		save()
		return {ok = true}
	end,
}

local function parseCmd(cmd)
	local func = cmds[cmd.command]
	if func then return func(cmd) end
	return {ok = false, message = 'unknown command'}
end

local function main()
	for _, mdm in ipairs({peripheral.find 'modem'}) do
		mdm.open(14850)
	end
	scan()
	local scanTimer = os.startTimer(database.scanInterval)
	repeat
		local edata = {os.pullEvent()}
		if edata[1] == 'timer' then
			if edata[2] == scanTimer then
				scanTimer = os.startTimer(database.scanInterval)
				scan()
			end
		elseif edata[1] == 'skcmd' then
			log('command', edata[3].command)
			local ok, res = pcall(parseCmd, edata[3])
			log('result', res)
			if not ok then res = {ok = false, error = res} end
			os.queueEvent('skres', edata[2], res)
		elseif edata[1] == 'modem_message' and edata[3] == 14850 and edata[5].request then
			local mdm, reply = edata[2], edata[4]
			local rid, cmd = edata[5].rid, edata[5].request
			local ok, res = pcall(parseCmd, cmd)
			if not ok then res = {ok = false, error = res} end
			peripheral.call(mdm, transmit, reply, {rid = rid, response = res})
		elseif edata[1] == 'peripheral' then
			local types = liblua.seq_to_set(peripheral.getTypes(edata[2]))
			if types.modem then
				peripheral.call(edata[2], 'open', 14850)
			end
		end
	until false
end

main()
