local libdaemon = require('libdaemon')
local serialization = require('serialization')
local filesystem = require('filesystem')

local log = filesystem.open('/tmp/daemon_load.log', 'w')
local function print(...)
	log:write(table.concat({...}, "\t") .. "\n")
end

local function load_daemon(name)
	print('RC/daemon_load: Loading daemon ' .. name)
	assert(libdaemon.try_load(name))
	local dmn = libdaemon.get(name)
	assert(dmn ~= nil, "daemon not loaded")
	local inst = dmn:start()
	print('RC/daemon_load: Loaded as ' .. inst.name)
end

print('RC/daemon_load: Reading configuration')

local cfg, err = io.open('/etc/daemon.cfg', 'r')
if not cfg then
	print('RC/daemon_load: Failed:', err)
	return
end

local data = serialization.unserialize(cfg:read("*a"))
if type(data.start) ~= "table" then
	print('RC/daemon_load: No start key, nothing to start')
	return
end

for name, _ in pairs(data.start) do
	local ok, err = xpcall(function() load_daemon(name) end, debug.traceback)
	if not ok then
		print('RC/daemon_load: Error occured while loading ' .. name .. ': ' .. err)
	end
end
print('RC/daemon_load: Done.')
log:close()
