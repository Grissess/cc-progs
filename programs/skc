local pretty = require 'cc.pretty'
local libgetopt = require 'lib.libgetopt'
local libacid = require 'lib.libacid'
local liblua = require 'lib.liblua'

fs.makeDir('/etc')
local dbo = libacid.DB('/etc/skc.conf')
local config = dbo:get()
local defaultConfig = {
	targetGroup = 'interface',
}
local dirty = false
for k, v in pairs(defaultConfig) do
	if not config[k] then
		config[k] = v
		dirty = true
	end
end
if dirty then dbo:set(config) end

local interface

local function request(cmd, tmout)
	if tmout == nil then tmout = 15 end
	local rid = math.random(1, 65536)
	local timeout = os.startTimer(tmout)
	--write('->')
	--pretty.pretty_print(cmd)
	if interface then
		peripheral.call(interface, 'open', 14850)
		peripheral.call(interface, 'transmit', 14850, 14850, {rid = rid, request = cmd})
	else
		os.queueEvent('skcmd', rid, cmd)
	end
	local ret
	repeat
		local edata = {os.pullEvent()}
		if edata[1] == 'timer' and edata[2] == timeout then
			error('timeout')
		elseif edata[1] == 'modem_message' and edata[5].rid == rid and edata[5].response then
			os.cancelTimer(timeout)
			ret = edata[5].response
			break
		elseif edata[1] == 'skres' and edata[2] == rid then
			os.cancelTimer(timeout)
			ret = edata[3]
			break
		end
	until false
	--write('<-')
	--pretty.pretty_print(ret)
	if not ret.ok then
		if ret.error then error(ret.error) end
		if ret.message then error(ret.message) end
		error(ret)
	end
	return ret
end

local function cmpStocks(a, b)
	return a.available > b.available
end

local function show(sp)
	local res = request{command = 'stock', species = sp}
	assert(res.ok, res.message)
	local stock = res.stock
	if sp then  -- pretend it's the whole table, not just the species stock
		stock = {[sp] = stock}
	end
	local entries = {}
	for species, st in pairs(stock) do
		table.insert(entries, {name = species, available = st.available.count})
	end
	table.sort(entries, cmpStocks)
	local tbl = {}
	for _, ent in ipairs(entries) do
		table.insert(tbl, {ent.name, tostring(ent.available)})
	end
	textutils.pagedTabulate(colors.lime, {'Name', 'Amt'}, colors.white, table.unpack(tbl))
end

local args, opts = libgetopt.getopt(...)
if opts.l or opts['local'] then
	interface = nil
else
	interface = peripheral.find('modem', function(addr, mdm)
		mdm.addr = addr
		return true
	end)
	if interface then
		interface = interface.addr
	else
		error('No modems found! If this is a local instance, pass --local')
	end
end

local function printHeader(...)
	term.setTextColor(colors.green)
	print(...)
	term.setTextColor(colors.white)
end

local function toInterfaces(nms, ifaces)
	ifaces = liblua.seq_to_set(ifaces)
	local ret = {}
	for _, nm in ipairs(nms) do
		for iface, _ in pairs(ifaces) do
			if iface:match(nm) then
				ret[iface] = true
			end
		end
	end
	return liblua.set_to_seq(ret)
end

if (not args[1]) or args[1] == 'show' then
	show(args[2])
elseif args[1] == 'get' then
	local name = assert(args[2], 'specify a name')
	local count = tonumber(args[3])
	if not count then count = 1 end
	local res = request{command = 'search', pattern = name}
	if (not res.matches) or #res.matches == 0 then
		error('no items by that name')
	elseif #res.matches > 1 then
		error('ambiguous name: could be any of: ' .. table.concat(res.matches, ', '))
	end
	local sp = res.matches[1]
	local res = request{command = 'moveTo', group = config.targetGroup, species = sp, count = count}
	assert(res.ok, res.message)
elseif args[1] == 'stow' then
	local res = request{command = 'moveAway', sourceGroup = config.targetGroup, targetGroup = 'storage'}
	assert(res.ok, res.message)
elseif args[1] == 'search' then
	local res = request{command = 'search', pattern = args[2]}
	printHeader('Results')
	for _, sp in ipairs(res.matches) do
		print(sp)
	end
elseif args[1] == 'group' then
	if (not args[2]) or args[2] == 'list' then
		local res = request{command = 'group'}
		printHeader('Groups')
		for _, grp in ipairs(res.groups) do
			print(grp)
		end
	elseif args[2] == 'show' then
		local res = request{command = 'group', group = args[3]}
		printHeader('Group ' .. args[3])
		for _, iface in ipairs(res.interfaces) do
			print(iface)
		end
	elseif args[2] == 'add' then
		local ifaces = toInterfaces({table.unpack(args, 4)}, request{command = 'interfaces'})
		request{command = 'groupAdd', group = args[3], interfaces = ifaces}
	elseif args[2] == 'remove' then
		local ifaces = toInterfaces({table.unpack(args, 4)}, request{command = 'group', group = args[3]})
		request{command = 'groupRemove', group = args[3], interfaces = ifaces}
	elseif args[2] == 'clear' then
		request{command = 'groupClear', group = args[3]}
	else
		error('unrecognized group command ' .. args[2])
	end
elseif args[1] == 'if' or args[1] == 'interfaces' then
	local res = request{command = 'interfaces'}
	printHeader('Interfaces')
	for _, iface in ipairs(res.interfaces) do
		print(iface)
	end
elseif args[1] == 'save' then
	request{command = 'save'}
else
	error('unrecognized command ' .. args[1])
end
