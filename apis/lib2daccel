local lib2daccel = {}

REVISION = 3
lib2daccel.REVISION = REVISION

local Fb = {}
lib2daccel.Fb = Fb
Fb.mt = {
	__index = Fb
}

function Fb.new(w, h)
	local res = setmetatable({
		w = w,
		h = h,
	}, Fb.mt)
	res:clear()
	return res
end

function Fb.copy(fb)
	local inst = setmetatable({
		w = fb.w,
		h = fb.h,
	}, Fb.mt)
	inst.chs = {}
	inst.fgs = {}
	inst.bgs = {}
	for i = 0, inst.w * inst.h - 1 do
		inst.chs[i] = fb.chs[i]
		inst.fgs[i] = fb.fgs[i]
		inst.bgs[i] = fb.bgs[i]
	end
	return inst
end

function Fb:clear()
	self.chs = {}
	self.fgs = {}
	self.bgs = {}
	for i = 0, self.w * self.h - 1 do
		self.chs[i] = ' '
		self.fgs[i] = 0xFFFFFF
		self.bgs[i] = 0
	end
end

function Fb:set(x, y, ch, fg, bg)
	x = x - 1
	y = y - 1
	local idx = y * self.w + x
	if ch ~= nil then
		self.chs[idx] = ch
	end
	if fg ~= nil then
		self.fgs[idx] = fg
	end
	if bg ~= nil then
		self.bgs[idx] = bg
	end
end

function Fb:get(x, y)
	x = x - 1
	y = y - 1
	local idx = y * self.w + x
	if idx < 0 or idx >= self.w * self.h then
		error('Illegal Fb index ' .. idx .. '(x=' .. x .. ', y=' .. y .. ')')
	end
	return self.chs[idx], self.fgs[idx], self.bgs[idx]
end

function Cell(ch, fg, bg)
	return {
		ch = ch,
		fg = fg,
		bg = bg,
	}
end

local Accel = {}
Accel.mt = {
	__index = Accel,
}

local function new(dev)
	local res = setmetatable({
		dev = dev,
		fg = 0xFFFFFF,
		bg = 0,
	}, Accel.mt)
	res:clear()
	res:flush(true)
	return res
end
lib2daccel.new = new

function Accel:clear()
	if self.w == nil or self.h == nil then
		self.w, self.h = self.dev.getResolution()
	end
	if self.rfb == nil then
		self.rfb = Fb.new(self.w, self.h)
	else
		self.rfb:clear()
	end
end

function Accel:flush(purge)
	local ops = 0
	if purge or self.dfb == nil then
		for y = 1, self.h do
			local cell = Cell(self.rfb:get(1, y))
			local cur_fg, cur_bg, cur_buf = cell.fg, cell.bg, cell.ch
			local cur_x = 1
			for x = 2, self.w do
				cell = Cell(self.rfb:get(x, y))
				if cell.fg ~= cur_fg or cell.bg ~= cur_bg then
					self.dev.setForeground(cur_fg)
					self.dev.setBackground(cur_bg)
					self.dev.set(cur_x, y, cur_buf)
					ops = ops + 1
					cur_x = x
					cur_fg, cur_bg, cur_buf = cell.fg, cell.bg, cell.ch
				else
					cur_buf = cur_buf .. cell.ch
				end
			end
			self.dev.setForeground(cur_fg)
			self.dev.setBackground(cur_bg)
			self.dev.set(cur_x, y, cur_buf)
			ops = ops + 1
		end
		self.dfb = Fb.copy(self.rfb)
	else
	--[[
		The core of this algorithm is that we want to make the fewest calls to
		the GPU as possible; to achieve this goal, we consider that processor
		time is cheap, and look to optimize the number of calls to set() to
		bring our current lines buffer to the current disp_lines buffer. In
		general, this means we must look for spans in which cells differ in
		characters, but colors remain the same.
		Note that vertical blitting might be better in certain cases, but all
		the ways I could figure to truly optimize the covering appeared to be
		in NP, and processor time isn't *that* cheap...
	]]--
		for y = 1, self.h do
			local cur_x, cur_fg, cur_bg, cur_buf, do_blit = nil, nil, nil, '', true
			local x = 1
			while x <= self.w do
				local cur_cell = Cell(self.rfb:get(x, y))
				local disp_cell = Cell(self.dfb:get(x, y))
				if (cur_cell.ch ~= disp_cell.ch) or
					(cur_cell.bg ~= disp_cell.bg) or
					(cur_cell.fg ~= disp_cell.fg) then
					local fg, bg = cur_cell.fg, cur_cell.bg
					local sx, nx = x, x + 1
					local buf = cur_cell.ch
					while nx <= self.w do
						cur_cell = Cell(self.rfb:get(nx, y))
						disp_cell = Cell(self.dfb:get(nx, y))
						if cur_cell.ch == disp_cell.ch or
							cur_cell.fg ~= disp_cell.fg or
							cur_cell.bg ~= disp_cell.bg then
							break
						end
						buf = buf .. cur_cell.ch
						nx = nx + 1
					end
					for ix = sx, nx - 1 do
						self.dfb:set(ix, y, self.rfb:get(ix, y))
					end
					self.dev.setForeground(fg)
					self.dev.setBackground(bg)
					self.dev.set(sx, y, buf)
					ops = ops + 1
					x = nx
				else
					x = x + 1
				end
			end
		end
	end
	return ops
end

function Accel:valid(x, y)
	return 1 <= x and x <= self.w and 1 <= y and y <= self.h
end

local function _proxy_inner(self, k)
	return function(...)
		return self.self[k](self.self, ...)
	end
end

local _proxy_mt = {__index = _proxy_inner}

function Accel:proxy()
	return setmetatable({
		self = self,
		address = self.dev.address,
		type = self.dev.type,
	}, _proxy_mt)
end

function Accel:set(x, y, text, vertical)
	for idx = 1, #text do
		local ch = text:sub(idx, idx)
		if self:valid(x, y) then
			self.rfb:set(x, y, ch, self.fg, self.bg)
		end
		if vertical then
			y = y + 1
			if y > self.h then
				x = x + 1
				y = 1
			end
		else
			x = x + 1
			if x > self.w then
				y = y + 1
				x = 1
			end
		end
	end
end

function Accel:get(x, y)
	if self:valid(x, y) then
		return self.rfb:get(x, y)
	end
	return nil
end

function Accel:fill(x, y, w, h, ch)
	for sy = y, y + h - 1 do
		for sx = x, x + w - 1 do
			if self:valid(sx, sy) then
				self.rfb:set(sx, sy, ch, self.fg, self.bg)
			end
		end
	end
end

function Accel:copy(x, y, w, h, dx, dy)
	for sy = y, y + h - 1 do
		for sx = x, x + w - 1 do
			local tx, ty = sx + dx, sy + dy
			if self:valid(sx, sy) and self:valid(dx, dy) then
				self.rfb:set(dx, dy, self.rfb:get(sx, sy))
			end
		end
	end
end

function Accel:getBackground()
	return self.bg, false
end

function Accel:setBackground(bg)
	self.bg = bg
end

function Accel:getForeground()
	return self.fg, false
end

function Accel:setForeground(fg)
	self.fg = fg
end

local function _make_passthrough(meth)
	return function(self, ...)
		return self.dev[meth](...)
	end
end

Accel.maxDepth = _make_passthrough('maxDepth')
Accel.getDepth = _make_passthrough('getDepth')
Accel.setDepth = _make_passthrough('setDepth')
Accel.maxResolution = _make_passthrough('maxResolution')
Accel.getResolution = _make_passthrough('getResolution')
Accel.setResolution = _make_passthrough('setResolution')
Accel.getScreen = _make_passthrough('getScreen')
Accel.bind = _make_passthrough('bind')

return lib2daccel
