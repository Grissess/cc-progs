local libnic = {}
libnic.REVISION = 5

local event = require('event')
local component = require('component')

libnic.ALL_NICS = {}
libnic.NIC_KINDS = {
	modem = true,
	tunnel = true,
}

function libnic.is_nic_kind(kind)
	return libnic.NIC_KINDS[kind] and true or false
end

for addr, kind in component.list() do
	if libnic.is_nic_kind(kind) then
		libnic.ALL_NICS[addr] = kind
	end
end

event.listen("component_added", function(ev, addr, kind)
	if libnic.is_nic_kind(kind) then
		libnic.ALL_NICS[addr] = kind
		event.push("nic_added", addr, kind)
	end
end)

event.listen("component_removed", function(ev, addr, kind)
	if libnic.ALL_NICS[addr] ~= nil then
		event.push("nic_removed", addr, kind)
	end
	libnic.ALL_NICS[addr] = nil
end)

function libnic.broadcast_all(port, ...)
	for addr, kind in pairs(libnic.ALL_NICS) do
		if kind == "modem" then
			component.invoke(addr, "broadcast", port, ...)
		elseif kind == "tunnel" then
			component.invoke(addr, "send", ...)
		end
	end
end

function libnic.send_all(dst, port, ...)
	for addr, kind in pairs(libnic.ALL_NICS) do
		if kind == "modem" then
			component.invoke(addr, "send", dst, port, ...)
		end
	end
end

function libnic.open_all(port)
	for addr, kind in pairs(libnic.ALL_NICS) do
		if kind == "modem" then
			component.invoke(addr, "open", port)
		end
	end
end

function libnic.get_mtu(dev)
	-- There appear to be cases where the maxPacketSize of a modem is
	-- unavailable but enforced anyway. In those cases, just take a good guess
	-- as to what it is (the default works nicely).
	if libnic.ALL_NICS[dev] == nil then return nil end
	local success, result = pcall(component.invoke, dev, "maxPacketSize")
	if success then return result end
	return 8192  -- Best guess
end

return libnic
