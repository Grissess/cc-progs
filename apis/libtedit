local libtedit = {}

REVISION = 39
libtedit.REVISION = REVISION

local CC = os.loadAPI ~= nil

if not CC then
	term = require('term')
	colors = {
		white = 0,
		orange = 1,
		magenta = 2,
		lightblue = 3,
		lightBlue = 3,
		yellow = 4,
		lime = 5,
		pink = 6,
		gray = 7,
		silver = 8,
		lightGray = 8,
		cyan = 9,
		purple = 10,
		blue = 11,
		brown = 12,
		green = 13,
		red = 14,
		black = 15,
	}
end

colorschema = {
	full = {
		default = colors.white,
		oper = colors.green,
		member = colors.cyan,
		digit = colors.cyan,
		keyword = colors.yellow,
		func = colors.blue,
		comment = colors.pink,
		string = colors.red,
		error = colors.pink,
		highlight = colors.orange,
		status = colors.lightGray,
	},
	gray = {
		default = colors.white,
		oper = colors.white,
		member = colors.lightGray,
		digit = colors.white,
		keyword = colors.lightGray,
		func = colors.white,
		comment = colors.lightGray,
		string = colors.white,
		error = colors.gray,
		highlight = colors.lightGray,
		status = colors.lightGray,
	},
}
libtedit.colorschema = colorschema

colormap = {
	[colors.white] = "0",
	[colors.orange] = "1",
	[colors.magenta] = "2",
	[colors.lightBlue] = "3",
	[colors.yellow] = "4",
	[colors.lime] = "5",
	[colors.pink] = "6",
	[colors.gray] = "7",
	[colors.lightGray] = "8",
	[colors.cyan] = "9",
	[colors.purple] = "a",
	[colors.blue] = "b",
	[colors.brown] = "c",
	[colors.green] = "d",
	[colors.red] = "e",
	[colors.black] = "f",
}
libtedit.colormap = colormap

revcolmap = {}
for col, chr in pairs(colormap) do
	revcolmap[chr] = col
end
libtedit.revcolmap = revcolmap

highlighter = {
	new = function(classes)
		return setmetatable({classes = classes}, {__index = highlighter})
	end,

	highlight = function(self, text, cs)
		local fg = string.rep(colormap[cs.default], #text)
		for class, matches in pairs(self.classes) do
			for idx, match in ipairs(matches) do
				local sidx = 1
				local mstart, mend = text:find(match, sidx)
				while mstart ~= nil do
					fg = fg:sub(0, mstart - 1) .. colormap[cs[class]]:rep(mend - mstart + 1) .. fg:sub(mend + 1)
					sidx = mend + 1
					mstart, mend = text:find(match, sidx)
				end
			end
		end
		return fg
	end,
}
libtedit.highlighter = highlighter

syntaxes = {
	none = highlighter.new({}),
	lua = highlighter.new({  -- TODO: All of these need some contextual awareness
		oper = {"%{", "%}", ",", "%(", "%)", "%+"},
		member = {"%.", ":"},
		digit = {"%d"},
		keyword = {"function", "if", "then", "else", "while", "for", "in", "do", "end", "return", "local", "true", "false", "nil", "and", "or"},
		func = {  -- FIXME
			"setmetatable", "getmetatable", "pairs", "ipairs", "unpack", "error", "print",
			"tonumber", "tostring",
			"table%.insert", "table%.remove", "table%.concat", "table%.unpack",
			"string%.rep", "string%.find", "string%.match", "string%.gmatch", "string%.gsub",
			"io.open",
		},
		comment = {"%-%-.*$"},
		string = {"\"[^\"]*\"", "'[^']*'"},
		error = {"!="},
	}),
}
libtedit.syntaxes = syntaxes

if CC then
	function term_blit(term, text, fg)
		if term.blit ~= nil then
			term.blit(text, fg, string.rep(" ", #text))
			return
		end
		if #text <= 0 then return end
		if #text ~= #fg then error("text and fg must be of same length") end
		local idx = 1
		local curcol = nil
		while idx <= #text do
			if revcolmap[fg:sub(idx, idx)] ~= curcol then
				curcol = revcolmap[fg:sub(idx, idx)]
				term.setTextColor(curcol)
			end
			term.write(text:sub(idx, idx))
			idx = idx + 1
		end
	end
else
	local real_colors = {
		[colors.black] = 0x191919,  -- Avoid invisibility
		[colors.red] = 0x993333,
		[colors.green] = 0x667F33,
		[colors.brown] = 0x664C33,
		[colors.blue] = 0x334CB2,
		[colors.purple] = 0x7F3FB2,
		[colors.cyan] = 0x4C7F99,
		[colors.silver] = 0x999999,
		[colors.gray]= 0x4C4C4C,
		[colors.pink] = 0xF27FA5,
		[colors.lime] = 0x7FCC19,
		[colors.yellow] = 0xE5E533,
		[colors.lightblue] = 0x6699D8,
		[colors.magenta] = 0xB24CD8,
		[colors.orange] = 0xD87F33,
		[colors.white] = 0xFFFFFF,
	}
	libtedit.real_colors = real_colors
	function term_blit(gpu, text, fg, line, ts)
		if #text <= 0 then return end
		if #text ~= #fg then error("text and fg must be of same length") end
		--[[
		lib2daccel handles most of this now
		local idx = 1
		local curx = 1
		local stx = 1
		local curcol = nil
		local buffer = ""
		while idx <= #text do
			if revcolmap[fg:sub(idx, idx)] ~= curcol then
				if #buffer > 0 then
					while buffer:find('\t') ~= nil do buffer = buffer:gsub('()\t', function(i) return string.rep(" ", (ts - (i-1) % ts)) end, 1) end
					gpu.set(stx, line, buffer)
					curx = curx + #buffer
				end
				buffer = ""
				stx = curx
				curcol = revcolmap[fg:sub(idx, idx)]
				gpu.setForeground(real_colors[curcol])
			end
			buffer = buffer .. text:sub(idx, idx)
			idx = idx + 1
		end
		if #buffer > 0 then
			gpu.set(stx, line, buffer)
		end
		]]--
		local rx = 1
		for idx = 1, #text do
			local ch = text:sub(idx, idx)
			local col = real_colors[revcolmap[fg:sub(idx, idx)]]
			gpu.setForeground(col)
			local nx = rx + 1
			if ch == '\t' then
				nx = rx + ts - (rx-1) % ts
				for x = rx, nx - 1 do
					gpu.set(x, line, ' ')
				end
			else
				gpu.set(rx, line, ch)
			end
			rx = nx
		end
	end
end
libtedit.term_blit = term_blit

buffer = {
	new = function(text)
		if text == nil then text = "" end
		local lines = {}
		local nlidx = text:find("\n")
		while nlidx ~= nil do
			table.insert(lines, text:sub(0, nlidx - 1))
			text = text:sub(nlidx + 1)
			nlidx = text:find("\n")
		end
		table.insert(lines, text)  -- guaranteed to be at least one empty line
		return setmetatable({lines = lines, cx = 1, cy = 1, sx = 1, sy = 1, width = 51, height = 19, dirty = true, syntax = syntaxes.lua, status = "", tabstop = 8}, {__index = buffer})
	end,

	clampxy = function(self, x, y)
		if y > #self.lines then y = #self.lines end
		if y < 1 then y = 1 end
		width = #(self.lines[y])
		if x < 1 then x = 1 end
		if x > width + 1 then x = width + 1 end
		return x, y
	end,

	setscroll = function(self, x, y)
		self.sx, self.sy = self:clampxy(x, y)
		self.dirty = true
	end,

	setcursor = function(self, x, y)
		self.cx, self.cy = self:clampxy(x, y)
		if self.cy < self.sy then self.sy = self.cy end
		if self.cy > self.sy + self.height - 1 then self.sy = self.cy - self.height + 1 end
		if self.cx < self.sx then self.sx = self.cx end
		if self.cx > self.sx + self.width - 1 then self.sx = self.cx - self.width + 1 end
		self.dirty = true
	end,

	sethighlights = function(self, ...)
		self.syntax.classes.highlight = {...}
		self.dirty = true
	end,

	blit = function(self, disp)
		local tw, th
		if CC then
			tw, th = disp.getSize()
		else
			tw, th = disp.getResolution()
		end
		local bh = math.floor((#self.status + tw - 1) / tw)
		local ts = th - bh
		self.width, self.height = tw, ts
		local tx, ty = 1, 1
		local bx, by = self.sx, self.sy
		if CC then
			disp.setBackgroundColor(colors.black)
		else
			disp.setBackground(0x000000)
		end
		local colset
		if (not CC) or disp.isColor() then
			colset = colorschema.full
		else
			colset = colorschema.gray
		end

		if CC then
			disp.clear()
		else
			disp.fill(1, 1, tw, th, ' ')
		end
		while ty <= ts and by <= #self.lines do
			local str = self.lines[by]:sub(bx, bx + tw - 1)
			if #str > 0 then
				local fg = self.syntax:highlight(str, colset)
				if CC then 
					disp.setCursorPos(1, ty)
					term_blit(disp, str, fg)
				else
					term_blit(disp, str, fg, ty, self.tabstop)
				end
			end
			ty = ty + 1
			by = by + 1
		end
		self.dirty = false

		if CC then
			disp.setTextColor(colset.status or colset.default)
		else
			disp.setForeground(libtedit.real_colors[colset.status or colset.default])
		end
		local text = self.status
		local ly = ts + 1
		while #text > 0 do
			if CC then
				disp.setCursorPos(1, ly)
				disp.write(text)
			else
				disp.set(1, ly, text)
			end
			ly = ly + 1
			text = text:sub(tw)
		end

		local vcx, vcy = self:virtual(self.cx, self.cy)

		if CC then
			term.setCursorPos(vcx - self.sx + 1, vcy - self.sy + 1)
		else
			term.setCursor(vcx - self.sx + 1, vcy - self.sy + 1)
		end
		term.setCursorBlink(true)
	end,

	virtual = function(self, x, y)
		x, y = self:clampxy(x, y)
		local line = self.lines[y]
		local rx = 1
		for i = 1, math.min(#line, x - 1) do
			if line:sub(i, i) == '\t' then
				rx = rx + (self.tabstop - (i-1) % self.tabstop)
			else
				rx = rx + 1
			end
		end
		return rx, y
	end,

	insert = function(self, text)
		local str = self.lines[self.cy]
		str = str:sub(0, self.cx - 1) .. text .. str:sub(self.cx)
		self.lines[self.cy] = str
		self.cx = self.cx + #text
		self:setcursor(self.cx, self.cy)
		self.dirty = true
	end,

	delete = function(self, cnt)
		if cnt == nil then cnt = 1 end
		local str = self.lines[self.cy]
		str = str:sub(0, self.cx - 1) .. str:sub(self.cx + cnt)
		self.lines[self.cy] = str
		self.dirty = true
	end,
}
libtedit.buffer = buffer

return libtedit
